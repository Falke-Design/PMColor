/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@jaames/iro/dist/iro.es.js":
/*!*************************************************!*\
  !*** ./node_modules/@jaames/iro/dist/iro.es.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/*!\n * iro.js v5.1.5\n * 2016-2020 James Daniel\n * Licensed under MPL 2.0\n * github.com/jaames/iro.js\n */\n\nvar n,u,t,i,r,o,f={},e=[],c=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|^--/i;function s(n,l){for(var u in l){ n[u]=l[u]; }return n}function a(n){var l=n.parentNode;l&&l.removeChild(n);}function h(n,l,u){var t,i,r,o,f=arguments;if(l=s({},l),arguments.length>3){ for(u=[u],t=3;t<arguments.length;t++){ u.push(f[t]); } }if(null!=u&&(l.children=u),null!=n&&null!=n.defaultProps){ for(i in n.defaultProps){ void 0===l[i]&&(l[i]=n.defaultProps[i]); } }return o=l.key,null!=(r=l.ref)&&delete l.ref,null!=o&&delete l.key,v(n,l,o,r)}function v(l,u,t,i){var r={type:l,props:u,key:t,ref:i,__k:null,__p:null,__b:0,__e:null,l:null,__c:null,constructor:void 0};return n.vnode&&n.vnode(r),r}function d(n){return n.children}function y(n){if(null==n||\"boolean\"==typeof n){ return null; }if(\"string\"==typeof n||\"number\"==typeof n){ return v(null,n,null,null); }if(null!=n.__e||null!=n.__c){var l=v(n.type,n.props,n.key,null);return l.__e=n.__e,l}return n}function m(n,l){this.props=n,this.context=l;}function w(n,l){if(null==l){ return n.__p?w(n.__p,n.__p.__k.indexOf(n)+1):null; }for(var u;l<n.__k.length;l++){ if(null!=(u=n.__k[l])&&null!=u.__e){ return u.__e; } }return \"function\"==typeof n.type?w(n):null}function g(n){var l,u;if(null!=(n=n.__p)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++){ if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break} }return g(n)}}function k(l){(!l.__d&&(l.__d=!0)&&1===u.push(l)||i!==n.debounceRendering)&&(i=n.debounceRendering,(n.debounceRendering||t)(_));}function _(){var n,l,t,i,r,o,f,e;for(u.sort(function(n,l){return l.__v.__b-n.__v.__b});n=u.pop();){ n.__d&&(t=void 0,i=void 0,o=(r=(l=n).__v).__e,f=l.__P,e=l.u,l.u=!1,f&&(t=[],i=$(f,r,s({},r),l.__n,void 0!==f.ownerSVGElement,null,t,e,null==o?w(r):o),j(t,r),i!=o&&g(r))); }}function b(n,l,u,t,i,r,o,c,s){var h,v,p,d,y,m,g,k=u&&u.__k||e,_=k.length;if(c==f&&(c=null!=r?r[0]:_?w(u,0):null),h=0,l.__k=x(l.__k,function(u){if(null!=u){if(u.__p=l,u.__b=l.__b+1,null===(p=k[h])||p&&u.key==p.key&&u.type===p.type){ k[h]=void 0; }else { for(v=0;v<_;v++){if((p=k[v])&&u.key==p.key&&u.type===p.type){k[v]=void 0;break}p=null;} }if(d=$(n,u,p=p||f,t,i,r,o,null,c,s),(v=u.ref)&&p.ref!=v&&(g||(g=[])).push(v,u.__c||d,u),null!=d){if(null==m&&(m=d),null!=u.l){ d=u.l,u.l=null; }else if(r==p||d!=c||null==d.parentNode){n:if(null==c||c.parentNode!==n){ n.appendChild(d); }else{for(y=c,v=0;(y=y.nextSibling)&&v<_;v+=2){ if(y==d){ break n; } }n.insertBefore(d,c);}\"option\"==l.type&&(n.value=\"\");}c=d.nextSibling,\"function\"==typeof l.type&&(l.l=d);}}return h++,u}),l.__e=m,null!=r&&\"function\"!=typeof l.type){ for(h=r.length;h--;){ null!=r[h]&&a(r[h]); } }for(h=_;h--;){ null!=k[h]&&D(k[h],k[h]); }if(g){ for(h=0;h<g.length;h++){ A(g[h],g[++h],g[++h]); } }}function x(n,l,u){if(null==u&&(u=[]),null==n||\"boolean\"==typeof n){ l&&u.push(l(null)); }else if(Array.isArray(n)){ for(var t=0;t<n.length;t++){ x(n[t],l,u); } }else { u.push(l?l(y(n)):n); }return u}function C(n,l,u,t,i){var r;for(r in u){ r in l||N(n,r,null,u[r],t); }for(r in l){ i&&\"function\"!=typeof l[r]||\"value\"===r||\"checked\"===r||u[r]===l[r]||N(n,r,l[r],u[r],t); }}function P(n,l,u){\"-\"===l[0]?n.setProperty(l,u):n[l]=\"number\"==typeof u&&!1===c.test(l)?u+\"px\":null==u?\"\":u;}function N(n,l,u,t,i){var r,o,f,e,c;if(\"key\"===(l=i?\"className\"===l?\"class\":l:\"class\"===l?\"className\":l)||\"children\"===l);else if(\"style\"===l){ if(r=n.style,\"string\"==typeof u){ r.cssText=u; }else{if(\"string\"==typeof t&&(r.cssText=\"\",t=null),t){ for(o in t){ u&&o in u||P(r,o,\"\"); } }if(u){ for(f in u){ t&&u[f]===t[f]||P(r,f,u[f]); } }} }else{ \"o\"===l[0]&&\"n\"===l[1]?(e=l!==(l=l.replace(/Capture$/,\"\")),c=l.toLowerCase(),l=(c in n?c:l).slice(2),u?(t||n.addEventListener(l,T,e),(n.t||(n.t={}))[l]=u):n.removeEventListener(l,T,e)):\"list\"!==l&&\"tagName\"!==l&&\"form\"!==l&&!i&&l in n?n[l]=null==u?\"\":u:\"function\"!=typeof u&&\"dangerouslySetInnerHTML\"!==l&&(l!==(l=l.replace(/^xlink:?/,\"\"))?null==u||!1===u?n.removeAttributeNS(\"http://www.w3.org/1999/xlink\",l.toLowerCase()):n.setAttributeNS(\"http://www.w3.org/1999/xlink\",l.toLowerCase(),u):null==u||!1===u?n.removeAttribute(l):n.setAttribute(l,u)); }}function T(l){return this.t[l.type](n.event?n.event(l):l)}function $(l,u,t,i,r,o,f,e,c,a){var h,v,p,y,w,g,k,_,C,P,N=u.type;if(void 0!==u.constructor){ return null; }(h=n.__b)&&h(u);try{n:if(\"function\"==typeof N){if(_=u.props,C=(h=N.contextType)&&i[h.__c],P=h?C?C.props.value:h.__p:i,t.__c?k=(v=u.__c=t.__c).__p=v.__E:(\"prototype\"in N&&N.prototype.render?u.__c=v=new N(_,P):(u.__c=v=new m(_,P),v.constructor=N,v.render=H),C&&C.sub(v),v.props=_,v.state||(v.state={}),v.context=P,v.__n=i,p=v.__d=!0,v.__h=[]),null==v.__s&&(v.__s=v.state),null!=N.getDerivedStateFromProps&&s(v.__s==v.state?v.__s=s({},v.__s):v.__s,N.getDerivedStateFromProps(_,v.__s)),p){ null==N.getDerivedStateFromProps&&null!=v.componentWillMount&&v.componentWillMount(),null!=v.componentDidMount&&f.push(v); }else{if(null==N.getDerivedStateFromProps&&null==e&&null!=v.componentWillReceiveProps&&v.componentWillReceiveProps(_,P),!e&&null!=v.shouldComponentUpdate&&!1===v.shouldComponentUpdate(_,v.__s,P)){for(v.props=_,v.state=v.__s,v.__d=!1,v.__v=u,u.__e=null!=c?c!==t.__e?c:t.__e:null,u.__k=t.__k,h=0;h<u.__k.length;h++){ u.__k[h]&&(u.__k[h].__p=u); }break n}null!=v.componentWillUpdate&&v.componentWillUpdate(_,v.__s,P);}for(y=v.props,w=v.state,v.context=P,v.props=_,v.state=v.__s,(h=n.__r)&&h(u),v.__d=!1,v.__v=u,v.__P=l,h=v.render(v.props,v.state,v.context),u.__k=x(null!=h&&h.type==d&&null==h.key?h.props.children:h),null!=v.getChildContext&&(i=s(s({},i),v.getChildContext())),p||null==v.getSnapshotBeforeUpdate||(g=v.getSnapshotBeforeUpdate(y,w)),b(l,u,t,i,r,o,f,c,a),v.base=u.__e;h=v.__h.pop();){ v.__s&&(v.state=v.__s),h.call(v); }p||null==y||null==v.componentDidUpdate||v.componentDidUpdate(y,w,g),k&&(v.__E=v.__p=null);}else { u.__e=z(t.__e,u,t,i,r,o,f,a); }(h=n.diffed)&&h(u);}catch(l){n.__e(l,u,t);}return u.__e}function j(l,u){for(var t;t=l.pop();){ try{t.componentDidMount();}catch(l){n.__e(l,t.__v);} }n.__c&&n.__c(u);}function z(n,l,u,t,i,r,o,c){var s,a,h,v,p=u.props,d=l.props;if(i=\"svg\"===l.type||i,null==n&&null!=r){ for(s=0;s<r.length;s++){ if(null!=(a=r[s])&&(null===l.type?3===a.nodeType:a.localName===l.type)){n=a,r[s]=null;break} } }if(null==n){if(null===l.type){ return document.createTextNode(d); }n=i?document.createElementNS(\"http://www.w3.org/2000/svg\",l.type):document.createElement(l.type),r=null;}return null===l.type?p!==d&&(null!=r&&(r[r.indexOf(n)]=null),n.data=d):l!==u&&(null!=r&&(r=e.slice.call(n.childNodes)),h=(p=u.props||f).dangerouslySetInnerHTML,v=d.dangerouslySetInnerHTML,c||(v||h)&&(v&&h&&v.__html==h.__html||(n.innerHTML=v&&v.__html||\"\")),C(n,d,p,i,c),l.__k=l.props.children,v||b(n,l,u,t,\"foreignObject\"!==l.type&&i,r,o,f,c),c||(\"value\"in d&&void 0!==d.value&&d.value!==n.value&&(n.value=null==d.value?\"\":d.value),\"checked\"in d&&void 0!==d.checked&&d.checked!==n.checked&&(n.checked=d.checked))),n}function A(l,u,t){try{\"function\"==typeof l?l(u):l.current=u;}catch(l){n.__e(l,t);}}function D(l,u,t){var i,r,o;if(n.unmount&&n.unmount(l),(i=l.ref)&&A(i,null,u),t||\"function\"==typeof l.type||(t=null!=(r=l.__e)),l.__e=l.l=null,null!=(i=l.__c)){if(i.componentWillUnmount){ try{i.componentWillUnmount();}catch(l){n.__e(l,u);} }i.base=i.__P=null;}if(i=l.__k){ for(o=0;o<i.length;o++){ i[o]&&D(i[o],u,t); } }null!=r&&a(r);}function H(n,l,u){return this.constructor(n,u)}function I(l,u,t){var i,o,c;n.__p&&n.__p(l,u),o=(i=t===r)?null:t&&t.__k||u.__k,l=h(d,null,[l]),c=[],$(u,i?u.__k=l:(t||u).__k=l,o||f,f,void 0!==u.ownerSVGElement,t&&!i?[t]:o?null:e.slice.call(u.childNodes),c,!1,t||f,i),j(c,l);}n={},m.prototype.setState=function(n,l){var u=this.__s!==this.state&&this.__s||(this.__s=s({},this.state));(\"function\"!=typeof n||(n=n(u,this.props)))&&s(u,n),null!=n&&this.__v&&(this.u=!1,l&&this.__h.push(l),k(this));},m.prototype.forceUpdate=function(n){this.__v&&(n&&this.__h.push(n),this.u=!0,k(this));},m.prototype.render=d,u=[],t=\"function\"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,i=n.debounceRendering,n.__e=function(n,l,u){for(var t;l=l.__p;){ if((t=l.__c)&&!t.__p){ try{if(t.constructor&&null!=t.constructor.getDerivedStateFromError){ t.setState(t.constructor.getDerivedStateFromError(n)); }else{if(null==t.componentDidCatch){ continue; }t.componentDidCatch(n);}return k(t.__E=t)}catch(l){n=l;} } }throw n},r=f,o=0;\n\n// Some regular expressions for rgb() and hsl() Colors are borrowed from tinyColor\n// https://github.com/bgrins/TinyColor\n// Kelvin temperature math borrowed from Neil Barlett's implementation\n// from https://github.com/neilbartlett/color-temperature\n// https://www.w3.org/TR/css3-values/#integers\nvar CSS_INTEGER = '[-\\\\+]?\\\\d+%?'; // http://www.w3.org/TR/css3-values/#number-value\n\nvar CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?'; // Allow positive/negative integer/number. Don't capture the either/or, just the entire outcome\n\nvar CSS_UNIT = '(?:' + CSS_NUMBER + ')|(?:' + CSS_INTEGER + ')'; // Parse function params\n// Parens and commas are optional, and this also allows for whitespace between numbers\n\nvar PERMISSIVE_MATCH_3 = '[\\\\s|\\\\(]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')\\\\s*\\\\)?';\nvar PERMISSIVE_MATCH_4 = '[\\\\s|\\\\(]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')[,|\\\\s]+(' + CSS_UNIT + ')\\\\s*\\\\)?'; // Regex patterns for functional color strings\n\nvar REGEX_FUNCTIONAL_RGB = new RegExp('rgb' + PERMISSIVE_MATCH_3);\nvar REGEX_FUNCTIONAL_RGBA = new RegExp('rgba' + PERMISSIVE_MATCH_4);\nvar REGEX_FUNCTIONAL_HSL = new RegExp('hsl' + PERMISSIVE_MATCH_3);\nvar REGEX_FUNCTIONAL_HSLA = new RegExp('hsla' + PERMISSIVE_MATCH_4); // Color string parsing regex\n\nvar HEX_START = '^(?:#?|0x?)';\nvar HEX_INT_SINGLE = '([0-9a-fA-F]{1})';\nvar HEX_INT_DOUBLE = '([0-9a-fA-F]{2})';\nvar REGEX_HEX_3 = new RegExp(HEX_START + HEX_INT_SINGLE + HEX_INT_SINGLE + HEX_INT_SINGLE + '$');\nvar REGEX_HEX_4 = new RegExp(HEX_START + HEX_INT_SINGLE + HEX_INT_SINGLE + HEX_INT_SINGLE + HEX_INT_SINGLE + '$');\nvar REGEX_HEX_6 = new RegExp(HEX_START + HEX_INT_DOUBLE + HEX_INT_DOUBLE + HEX_INT_DOUBLE + '$');\nvar REGEX_HEX_8 = new RegExp(HEX_START + HEX_INT_DOUBLE + HEX_INT_DOUBLE + HEX_INT_DOUBLE + HEX_INT_DOUBLE + '$'); // Kelvin temperature bounds\n\nvar KELVIN_MIN = 1000;\nvar KELVIN_MAX = 40000; // Math shorthands\n\nvar log = Math.log;\nvar round = Math.round;\nvar floor = Math.floor;\n/**\r\n * @desc Parse a css unit string - either regular int or a percentage number\r\n * @param str - css unit string\r\n * @param max - max unit value, used for calculating percentages\r\n */\n\nfunction parseUnit(str, max) {\n  var isPercentage = str.indexOf('%') > -1;\n  var num = parseFloat(str);\n  return isPercentage ? max / 100 * num : num;\n}\n/**\r\n * @desc Parse hex str to an int\r\n * @param str - hex string to parse\r\n */\n\n\nfunction parseHexInt(str) {\n  return parseInt(str, 16);\n}\n/**\r\n * @desc Convert nunber into to 2-digit hex\r\n * @param int - number to convert\r\n */\n\n\nfunction intToHex(int) {\n  return int.toString(16).padStart(2, '0');\n}\n\nvar IroColor = function IroColor(value, onChange) {\n  // The default Color value\n  this.$ = {\n    h: 0,\n    s: 0,\n    v: 0,\n    a: 1\n  };\n  if (value) { this.set(value); } // The watch callback function for this Color will be stored here\n\n  this.onChange = onChange;\n  this.initialValue = Object.assign({}, this.$); // copy initial value\n};\n\nvar prototypeAccessors = { hsv: { configurable: true },hsva: { configurable: true },hue: { configurable: true },saturation: { configurable: true },value: { configurable: true },alpha: { configurable: true },kelvin: { configurable: true },rgb: { configurable: true },rgba: { configurable: true },hsl: { configurable: true },hsla: { configurable: true },rgbString: { configurable: true },rgbaString: { configurable: true },hexString: { configurable: true },hex8String: { configurable: true },hslString: { configurable: true },hslaString: { configurable: true } };\n/**\r\n  * @desc Set the Color from any valid value\r\n  * @param value - new color value\r\n*/\n\n\nIroColor.prototype.set = function set (value) {\n  if (typeof value === 'string') {\n    if (/^(?:#?|0x?)[0-9a-fA-F]{3,8}$/.test(value)) {\n      this.hexString = value;\n    } else if (/^rgba?/.test(value)) {\n      this.rgbString = value;\n    } else if (/^hsla?/.test(value)) {\n      this.hslString = value;\n    }\n  } else if (typeof value === 'object') {\n    if (value instanceof IroColor) {\n      this.hsv = value.hsv;\n    } else if (typeof value === 'object' && 'r' in value && 'g' in value && 'b' in value) {\n      this.rgb = value;\n    } else if (typeof value === 'object' && 'h' in value && 's' in value && 'v' in value) {\n      this.hsv = value;\n    } else if (typeof value === 'object' && 'h' in value && 's' in value && 'l' in value) {\n      this.hsl = value;\n    }\n  } else {\n    throw new Error('Invalid color value');\n  }\n};\n/**\r\n  * @desc Shortcut to set a specific channel value\r\n  * @param format - hsv | hsl | rgb\r\n  * @param channel - individual channel to set, for example if model = hsl, chanel = h | s | l\r\n  * @param value - new value for the channel\r\n*/\n\n\nIroColor.prototype.setChannel = function setChannel (format, channel, value) {\n    var obj;\n\n  this[format] = Object.assign({}, this[format],\n    ( obj = {}, obj[channel] = value, obj ));\n};\n/**\r\n * @desc Reset color back to its initial value\r\n */\n\n\nIroColor.prototype.reset = function reset () {\n  this.hsva = this.initialValue;\n};\n/**\r\n  * @desc make new Color instance with the same value as this one\r\n*/\n\n\nIroColor.prototype.clone = function clone () {\n  return new IroColor(this);\n};\n/**\r\n * @desc remove color onChange\r\n */\n\n\nIroColor.prototype.unbind = function unbind () {\n  this.onChange = undefined;\n};\n/**\r\n  * @desc Convert hsv object to rgb\r\n  * @param hsv - hsv color object\r\n*/\n\n\nIroColor.hsvToRgb = function hsvToRgb (hsv) {\n  var h = hsv.h / 60;\n  var s = hsv.s / 100;\n  var v = hsv.v / 100;\n  var i = floor(h);\n  var f = h - i;\n  var p = v * (1 - s);\n  var q = v * (1 - f * s);\n  var t = v * (1 - (1 - f) * s);\n  var mod = i % 6;\n  var r = [v, q, p, p, t, v][mod];\n  var g = [t, v, v, q, p, p][mod];\n  var b = [p, p, t, v, v, q][mod];\n  return {\n    r: r * 255,\n    g: g * 255,\n    b: b * 255\n  };\n};\n/**\r\n  * @desc Convert rgb object to hsv\r\n  * @param rgb - rgb object\r\n*/\n\n\nIroColor.rgbToHsv = function rgbToHsv (rgb) {\n  var r = rgb.r / 255;\n  var g = rgb.g / 255;\n  var b = rgb.b / 255;\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var delta = max - min;\n  var hue = 0;\n  var value = max;\n  var saturation = max === 0 ? 0 : delta / max;\n\n  switch (max) {\n    case min:\n      hue = 0; // achromatic\n\n      break;\n\n    case r:\n      hue = (g - b) / delta + (g < b ? 6 : 0);\n      break;\n\n    case g:\n      hue = (b - r) / delta + 2;\n      break;\n\n    case b:\n      hue = (r - g) / delta + 4;\n      break;\n  }\n\n  return {\n    h: hue * 60,\n    s: saturation * 100,\n    v: value * 100\n  };\n};\n/**\r\n  * @desc Convert hsv object to hsl\r\n  * @param hsv - hsv object\r\n*/\n\n\nIroColor.hsvToHsl = function hsvToHsl (hsv) {\n  var s = hsv.s / 100;\n  var v = hsv.v / 100;\n  var l = (2 - s) * v;\n  var divisor = l <= 1 ? l : 2 - l; // Avoid division by zero when lightness is close to zero\n\n  var saturation = divisor < 1e-9 ? 0 : s * v / divisor;\n  return {\n    h: hsv.h,\n    s: saturation * 100,\n    l: l * 50\n  };\n};\n/**\r\n  * @desc Convert hsl object to hsv\r\n  * @param hsl - hsl object\r\n*/\n\n\nIroColor.hslToHsv = function hslToHsv (hsl) {\n  var l = hsl.l * 2;\n  var s = hsl.s * (l <= 100 ? l : 200 - l) / 100; // Avoid division by zero when l + s is near 0\n\n  var saturation = l + s < 1e-9 ? 0 : 2 * s / (l + s);\n  return {\n    h: hsl.h,\n    s: saturation * 100,\n    v: (l + s) / 2\n  };\n};\n/**\r\n  * @desc Convert a kelvin temperature to an approx, RGB value\r\n  * @param kelvin - kelvin temperature\r\n*/\n\n\nIroColor.kelvinToRgb = function kelvinToRgb (kelvin) {\n  var temp = kelvin / 100;\n  var r, g, b;\n\n  if (temp < 66) {\n    r = 255;\n    g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);\n    b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);\n  } else {\n    r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);\n    g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);\n    b = 255;\n  }\n\n  return {\n    r: floor(r),\n    g: floor(g),\n    b: floor(b)\n  };\n};\n/**\r\n * @desc Convert an RGB color to an approximate kelvin temperature\r\n * @param kelvin - kelvin temperature\r\n*/\n\n\nIroColor.rgbToKelvin = function rgbToKelvin (rgb) {\n  var r = rgb.r;\n    var b = rgb.b;\n  var eps = 0.4;\n  var minTemp = KELVIN_MIN;\n  var maxTemp = KELVIN_MAX;\n  var temp;\n\n  while (maxTemp - minTemp > eps) {\n    temp = (maxTemp + minTemp) * 0.5;\n    var rgb$1 = IroColor.kelvinToRgb(temp);\n\n    if (rgb$1.b / rgb$1.r >= b / r) {\n      maxTemp = temp;\n    } else {\n      minTemp = temp;\n    }\n  }\n\n  return temp;\n};\n\nprototypeAccessors.hsv.get = function () {\n  // value is cloned to allow changes to be made to the values before passing them back\n  var value = this.$;\n  return {\n    h: value.h,\n    s: value.s,\n    v: value.v\n  };\n};\n\nprototypeAccessors.hsv.set = function (newValue) {\n  var oldValue = this.$;\n  newValue = Object.assign({}, oldValue,\n    newValue); // If this Color is being watched for changes we need to compare the new and old values to check the difference\n  // Otherwise we can just be lazy\n\n  if (this.onChange) {\n    // Compute changed values\n    var changes = {\n      h: false,\n      v: false,\n      s: false,\n      a: false\n    };\n\n    for (var key in oldValue) {\n      changes[key] = newValue[key] != oldValue[key];\n    }\n\n    this.$ = newValue; // If the value has changed, call hook callback\n\n    if (changes.h || changes.s || changes.v || changes.a) { this.onChange(this, changes); }\n  } else {\n    this.$ = newValue;\n  }\n};\n\nprototypeAccessors.hsva.get = function () {\n  return Object.assign({}, this.$);\n};\n\nprototypeAccessors.hsva.set = function (value) {\n  this.hsv = value;\n};\n\nprototypeAccessors.hue.get = function () {\n  return this.$.h;\n};\n\nprototypeAccessors.hue.set = function (value) {\n  this.hsv = {\n    h: value\n  };\n};\n\nprototypeAccessors.saturation.get = function () {\n  return this.$.s;\n};\n\nprototypeAccessors.saturation.set = function (value) {\n  this.hsv = {\n    s: value\n  };\n};\n\nprototypeAccessors.value.get = function () {\n  return this.$.v;\n};\n\nprototypeAccessors.value.set = function (value) {\n  this.hsv = {\n    v: value\n  };\n};\n\nprototypeAccessors.alpha.get = function () {\n  return this.$.a;\n};\n\nprototypeAccessors.alpha.set = function (value) {\n  this.hsv = Object.assign({}, this.hsv,\n    {a: value});\n};\n\nprototypeAccessors.kelvin.get = function () {\n  return IroColor.rgbToKelvin(this.rgb);\n};\n\nprototypeAccessors.kelvin.set = function (value) {\n  this.rgb = IroColor.kelvinToRgb(value);\n};\n\nprototypeAccessors.rgb.get = function () {\n  var ref = IroColor.hsvToRgb(this.$);\n    var r = ref.r;\n    var g = ref.g;\n    var b = ref.b;\n  return {\n    r: round(r),\n    g: round(g),\n    b: round(b)\n  };\n};\n\nprototypeAccessors.rgb.set = function (value) {\n  this.hsv = Object.assign({}, IroColor.rgbToHsv(value),\n    {a: value.a === undefined ? 1 : value.a});\n};\n\nprototypeAccessors.rgba.get = function () {\n  return Object.assign({}, this.rgb,\n    {a: this.alpha});\n};\n\nprototypeAccessors.rgba.set = function (value) {\n  this.rgb = value;\n};\n\nprototypeAccessors.hsl.get = function () {\n  var ref = IroColor.hsvToHsl(this.$);\n    var h = ref.h;\n    var s = ref.s;\n    var l = ref.l;\n  return {\n    h: round(h),\n    s: round(s),\n    l: round(l)\n  };\n};\n\nprototypeAccessors.hsl.set = function (value) {\n  this.hsv = Object.assign({}, IroColor.hslToHsv(value),\n    {a: value.a === undefined ? 1 : value.a});\n};\n\nprototypeAccessors.hsla.get = function () {\n  return Object.assign({}, this.hsl,\n    {a: this.alpha});\n};\n\nprototypeAccessors.hsla.set = function (value) {\n  this.hsl = value;\n};\n\nprototypeAccessors.rgbString.get = function () {\n  var rgb = this.rgb;\n  return (\"rgb(\" + (rgb.r) + \", \" + (rgb.g) + \", \" + (rgb.b) + \")\");\n};\n\nprototypeAccessors.rgbString.set = function (value) {\n  var match;\n  var r,\n      g,\n      b,\n      a = 1;\n\n  if (match = REGEX_FUNCTIONAL_RGB.exec(value)) {\n    r = parseUnit(match[1], 255);\n    g = parseUnit(match[2], 255);\n    b = parseUnit(match[3], 255);\n  } else if (match = REGEX_FUNCTIONAL_RGBA.exec(value)) {\n    r = parseUnit(match[1], 255);\n    g = parseUnit(match[2], 255);\n    b = parseUnit(match[3], 255);\n    a = parseUnit(match[4], 1);\n  }\n\n  if (match) {\n    this.rgb = {\n      r: r,\n      g: g,\n      b: b,\n      a: a\n    };\n  } else {\n    throw new Error('Invalid rgb string');\n  }\n};\n\nprototypeAccessors.rgbaString.get = function () {\n  var rgba = this.rgba;\n  return (\"rgba(\" + (rgba.r) + \", \" + (rgba.g) + \", \" + (rgba.b) + \", \" + (rgba.a) + \")\");\n};\n\nprototypeAccessors.rgbaString.set = function (value) {\n  this.rgbString = value;\n};\n\nprototypeAccessors.hexString.get = function () {\n  var rgb = this.rgb;\n  return (\"#\" + (intToHex(rgb.r)) + (intToHex(rgb.g)) + (intToHex(rgb.b)));\n};\n\nprototypeAccessors.hexString.set = function (value) {\n  var match;\n  var r,\n      g,\n      b,\n      a = 255;\n\n  if (match = REGEX_HEX_3.exec(value)) {\n    r = parseHexInt(match[1]) * 17;\n    g = parseHexInt(match[2]) * 17;\n    b = parseHexInt(match[3]) * 17;\n  } else if (match = REGEX_HEX_4.exec(value)) {\n    r = parseHexInt(match[1]) * 17;\n    g = parseHexInt(match[2]) * 17;\n    b = parseHexInt(match[3]) * 17;\n    a = parseHexInt(match[4]) * 17;\n  } else if (match = REGEX_HEX_6.exec(value)) {\n    r = parseHexInt(match[1]);\n    g = parseHexInt(match[2]);\n    b = parseHexInt(match[3]);\n  } else if (match = REGEX_HEX_8.exec(value)) {\n    r = parseHexInt(match[1]);\n    g = parseHexInt(match[2]);\n    b = parseHexInt(match[3]);\n    a = parseHexInt(match[4]);\n  }\n\n  if (match) {\n    this.rgb = {\n      r: r,\n      g: g,\n      b: b,\n      a: a / 255\n    };\n  } else {\n    throw new Error('Invalid hex string');\n  }\n};\n\nprototypeAccessors.hex8String.get = function () {\n  var rgba = this.rgba;\n  return (\"#\" + (intToHex(rgba.r)) + (intToHex(rgba.g)) + (intToHex(rgba.b)) + (intToHex(floor(rgba.a * 255))));\n};\n\nprototypeAccessors.hex8String.set = function (value) {\n  this.hexString = value;\n};\n\nprototypeAccessors.hslString.get = function () {\n  var hsl = this.hsl;\n  return (\"hsl(\" + (hsl.h) + \", \" + (hsl.s) + \"%, \" + (hsl.l) + \"%)\");\n};\n\nprototypeAccessors.hslString.set = function (value) {\n  var match;\n  var h,\n      s,\n      l,\n      a = 1;\n\n  if (match = REGEX_FUNCTIONAL_HSL.exec(value)) {\n    h = parseUnit(match[1], 360);\n    s = parseUnit(match[2], 100);\n    l = parseUnit(match[3], 100);\n  } else if (match = REGEX_FUNCTIONAL_HSLA.exec(value)) {\n    h = parseUnit(match[1], 360);\n    s = parseUnit(match[2], 100);\n    l = parseUnit(match[3], 100);\n    a = parseUnit(match[4], 1);\n  }\n\n  if (match) {\n    this.hsl = {\n      h: h,\n      s: s,\n      l: l,\n      a: a\n    };\n  } else {\n    throw new Error('Invalid hsl string');\n  }\n};\n\nprototypeAccessors.hslaString.get = function () {\n  var hsla = this.hsla;\n  return (\"hsl(\" + (hsla.h) + \", \" + (hsla.s) + \"%, \" + (hsla.l) + \"%, \" + (hsla.a) + \")\");\n};\n\nprototypeAccessors.hslaString.set = function (value) {\n  this.hslString = value;\n};\n\nObject.defineProperties( IroColor.prototype, prototypeAccessors );\n\nvar sliderDefaultOptions = {\n  sliderShape: 'bar',\n  sliderType: 'value',\n  minTemperature: 2200,\n  maxTemperature: 11000\n};\n/**\r\n * @desc Get the bounding dimensions of the slider\r\n * @param props - slider props\r\n */\n\nfunction getSliderDimensions(props) {\n  var width = props.width;\n  var sliderSize = props.sliderSize;\n  var borderWidth = props.borderWidth;\n  var handleRadius = props.handleRadius;\n  var padding = props.padding;\n  var sliderShape = props.sliderShape;\n  var ishorizontal = props.layoutDirection === 'horizontal'; // automatically calculate sliderSize if its not defined\n\n  sliderSize = sliderSize ? sliderSize : padding * 2 + handleRadius * 2 + borderWidth * 2;\n\n  if (sliderShape === 'circle') {\n    return {\n      handleStart: props.padding + props.handleRadius,\n      handleRange: width - padding * 2 - handleRadius * 2 - borderWidth * 2,\n      width: width,\n      height: width,\n      cx: width / 2,\n      cy: width / 2,\n      radius: width / 2 - borderWidth / 2\n    };\n  } else {\n    return {\n      handleStart: sliderSize / 2,\n      handleRange: width - sliderSize,\n      radius: sliderSize / 2,\n      x: 0,\n      y: 0,\n      width: ishorizontal ? sliderSize : width,\n      height: ishorizontal ? width : sliderSize\n    };\n  }\n}\n/**\r\n * @desc Get the current slider value for a given color, as a percentage\r\n * @param props - slider props\r\n * @param color\r\n */\n\nfunction getCurrentSliderValue(props, color) {\n  var hsva = color.hsva;\n\n  switch (props.sliderType) {\n    case 'alpha':\n      return hsva.a * 100;\n\n    case 'kelvin':\n      var minTemperature = props.minTemperature;\n  var maxTemperature = props.maxTemperature;\n      var temperatureRange = maxTemperature - minTemperature;\n      var percent = (color.kelvin - minTemperature) / temperatureRange * 100; // clmap percentage\n\n      return Math.max(0, Math.min(percent, 100));\n\n    case 'hue':\n      return hsva.h /= 3.6;\n\n    case 'saturation':\n      return hsva.s;\n\n    case 'value':\n    default:\n      return hsva.v;\n  }\n}\n/**\r\n * @desc Get the current slider value from user input\r\n * @param props - slider props\r\n * @param x - global input x position\r\n * @param y - global input y position\r\n */\n\nfunction getSliderValueFromInput(props, x, y) {\n  var ref = getSliderDimensions(props);\n  var handleRange = ref.handleRange;\n  var handleStart = ref.handleStart;\n  var handlePos;\n\n  if (props.layoutDirection === 'horizontal') {\n    handlePos = -1 * y + handleRange + handleStart;\n  } else {\n    handlePos = x - handleStart;\n  } // clamp handle position\n\n\n  handlePos = Math.max(Math.min(handlePos, handleRange), 0);\n  var percent = Math.round(100 / handleRange * handlePos);\n\n  switch (props.sliderType) {\n    case 'kelvin':\n      var minTemperature = props.minTemperature;\n  var maxTemperature = props.maxTemperature;\n      var temperatureRange = maxTemperature - minTemperature;\n      return minTemperature + temperatureRange * (percent / 100);\n\n    case 'alpha':\n      return percent / 100;\n\n    case 'hue':\n      return percent * 3.6;\n\n    default:\n      return percent;\n  }\n}\n/**\r\n * @desc Get the current handle position for a given color\r\n * @param props - slider props\r\n * @param color\r\n */\n\nfunction getSliderHandlePosition(props, color) {\n  var ref = getSliderDimensions(props);\n  var width = ref.width;\n  var height = ref.height;\n  var handleRange = ref.handleRange;\n  var handleStart = ref.handleStart;\n  var ishorizontal = props.layoutDirection === 'horizontal';\n  var sliderValue = getCurrentSliderValue(props, color);\n  var midPoint = ishorizontal ? width / 2 : height / 2;\n  var handlePos = handleStart + sliderValue / 100 * handleRange;\n\n  if (ishorizontal) {\n    handlePos = -1 * handlePos + handleRange + handleStart * 2;\n  }\n\n  return {\n    x: ishorizontal ? midPoint : handlePos,\n    y: ishorizontal ? handlePos : midPoint\n  };\n}\n/**\r\n * @desc Get the gradient stops for a slider\r\n * @param props - slider props\r\n * @param color\r\n */\n\nfunction getSliderGradient(props, color) {\n  var hsv = color.hsv;\n\n  switch (props.sliderType) {\n    case 'alpha':\n      var rgb = color.rgb;\n      return [[0, (\"rgba(\" + (rgb.r) + \",\" + (rgb.g) + \",\" + (rgb.b) + \",0)\")], [100, (\"rgb(\" + (rgb.r) + \",\" + (rgb.g) + \",\" + (rgb.b) + \")\")]];\n\n    case 'kelvin':\n      var stops = [];\n      var min = props.minTemperature;\n      var max = props.maxTemperature;\n      var numStops = 8;\n      var range = max - min;\n\n      for (var kelvin = min, stop = 0; kelvin < max; kelvin += range / numStops, stop += 1) {\n        var ref = IroColor.kelvinToRgb(kelvin);\n        var r = ref.r;\n        var g = ref.g;\n        var b = ref.b;\n        stops.push([100 / numStops * stop, (\"rgb(\" + r + \",\" + g + \",\" + b + \")\")]);\n      }\n\n      return stops;\n\n    case 'hue':\n      return [[0, '#f00'], [16.666, '#ff0'], [33.333, '#0f0'], [50, '#0ff'], [66.666, '#00f'], [83.333, '#f0f'], [100, '#f00']];\n\n    case 'saturation':\n      var noSat = IroColor.hsvToHsl({\n        h: hsv.h,\n        s: 0,\n        v: hsv.v\n      });\n      var fullSat = IroColor.hsvToHsl({\n        h: hsv.h,\n        s: 100,\n        v: hsv.v\n      });\n      return [[0, (\"hsl(\" + (noSat.h) + \",\" + (noSat.s) + \"%,\" + (noSat.l) + \"%)\")], [100, (\"hsl(\" + (fullSat.h) + \",\" + (fullSat.s) + \"%,\" + (fullSat.l) + \"%)\")]];\n\n    case 'value':\n    default:\n      var hsl = IroColor.hsvToHsl({\n        h: hsv.h,\n        s: hsv.s,\n        v: 100\n      });\n      return [[0, '#000'], [100, (\"hsl(\" + (hsl.h) + \",\" + (hsl.s) + \"%,\" + (hsl.l) + \"%)\")]];\n  }\n}\n/**\r\n * @desc Get the gradient coords for a slider\r\n * @param props - slider props\r\n */\n\nfunction getSliderGradientCoords(props) {\n  var ishorizontal = props.layoutDirection === 'horizontal';\n  return {\n    x1: '0%',\n    y1: ishorizontal ? '100%' : '0%',\n    x2: ishorizontal ? '0%' : '100%',\n    y2: '0%'\n  };\n}\n\n/**\r\n * @desc Get the point as the center of the wheel\r\n * @param props - wheel props\r\n */\nfunction getWheelDimensions(props) {\n  var rad = props.width / 2;\n  return {\n    width: props.width,\n    radius: rad - props.borderWidth,\n    cx: rad,\n    cy: rad\n  };\n}\n/**\r\n * @desc Translate an angle according to wheelAngle and wheelDirection\r\n * @param props - wheel props\r\n * @param angle - input angle\r\n */\n\nfunction translateWheelAngle(props, angle, invert) {\n  var wheelAngle = props.wheelAngle;\n  var wheelDirection = props.wheelDirection;\n\n  if (!invert && wheelDirection === 'clockwise' || invert && wheelDirection === 'anticlockwise') {\n    angle = (invert ? 180 : 360) - (wheelAngle - angle);\n  } else {\n    angle = wheelAngle + angle;\n  } // javascript's modulo operator doesn't produce positive numbers with negative input\n  // https://dev.to/maurobringolf/a-neat-trick-to-compute-modulo-of-negative-numbers-111e\n\n\n  return (angle % 360 + 360) % 360;\n}\n/**\r\n * @desc Get the current handle position for a given color\r\n * @param props - wheel props\r\n * @param color\r\n */\n\nfunction getWheelHandlePosition(props, color) {\n  var hsv = color.hsv;\n  var ref = getWheelDimensions(props);\n  var cx = ref.cx;\n  var cy = ref.cy;\n  var handleRange = props.width / 2 - props.padding - props.handleRadius - props.borderWidth;\n  var handleAngle = (180 + translateWheelAngle(props, hsv.h, true)) * (Math.PI / 180);\n  var handleDist = hsv.s / 100 * handleRange;\n  var direction = props.wheelDirection === 'clockwise' ? -1 : 1;\n  return {\n    x: cx + handleDist * Math.cos(handleAngle) * direction,\n    y: cy + handleDist * Math.sin(handleAngle) * direction\n  };\n}\n/**\r\n * @desc Get the current wheel value from user input\r\n * @param props - wheel props\r\n * @param x - global input x position\r\n * @param y - global input y position\r\n */\n\nfunction getWheelValueFromInput(props, x, y) {\n  var ref = getWheelDimensions(props);\n  var cx = ref.cx;\n  var cy = ref.cy;\n  var handleRange = props.width / 2 - props.padding - props.handleRadius - props.borderWidth;\n  x = cx - x;\n  y = cy - y; // Calculate the hue by converting the angle to radians\n\n  var hue = translateWheelAngle(props, Math.atan2(-y, -x) * (180 / Math.PI)); // Find the point's distance from the center of the wheel\n  // This is used to show the saturation level\n\n  var handleDist = Math.min(Math.sqrt(x * x + y * y), handleRange);\n  return {\n    h: Math.round(hue),\n    s: Math.round(100 / handleRange * handleDist)\n  };\n}\n/**\r\n * @desc Get the bounding dimensions of the box\r\n * @param props - box props\r\n */\n\nfunction getBoxDimensions(props) {\n  var width = props.width;\n  var padding = props.padding;\n  var handleRadius = props.handleRadius;\n  return {\n    width: width,\n    height: width,\n    radius: padding + handleRadius\n  };\n}\n/**\r\n * @desc Get the current box value from user input\r\n * @param props - box props\r\n * @param x - global input x position\r\n * @param y - global input y position\r\n */\n\nfunction getBoxValueFromInput(props, x, y) {\n  var ref = getBoxDimensions(props);\n  var width = ref.width;\n  var height = ref.height;\n  var radius = ref.radius;\n  var handleStart = radius;\n  var handleRangeX = width - radius * 2;\n  var handleRangeY = height - radius * 2;\n  var percentX = (x - handleStart) / handleRangeX * 100;\n  var percentY = (y - handleStart) / handleRangeY * 100;\n  return {\n    s: Math.max(0, Math.min(percentX, 100)),\n    v: Math.max(0, Math.min(100 - percentY, 100))\n  };\n}\n/**\r\n * @desc Get the current box handle position for a given color\r\n * @param props - box props\r\n * @param color\r\n */\n\nfunction getBoxHandlePosition(props, color) {\n  var ref = getBoxDimensions(props);\n  var width = ref.width;\n  var height = ref.height;\n  var radius = ref.radius;\n  var hsv = color.hsv;\n  var handleStart = radius;\n  var handleRangeX = width - radius * 2;\n  var handleRangeY = height - radius * 2;\n  return {\n    x: handleStart + hsv.s / 100 * handleRangeX,\n    y: handleStart + (handleRangeY - hsv.v / 100 * handleRangeY)\n  };\n}\n/**\r\n * @desc Get the gradient stops for a box\r\n * @param props - box props\r\n * @param color\r\n */\n\nfunction getBoxGradients(props, color) {\n  var hue = color.hue;\n  return [// saturation gradient\n  [[0, '#fff'], [100, (\"hsl(\" + hue + \",100%,50%)\")]], // lightness gradient\n  [[0, 'rgba(0,0,0,0)'], [100, '#000']]];\n}\n\n// Keep track of html <base> elements for resolveSvgUrl\n// getElementsByTagName returns a live HTMLCollection, which stays in sync with the DOM tree\n// So it only needs to be called once\nvar BASE_ELEMENTS = document.getElementsByTagName('base');\n/**\r\n * @desc Resolve an SVG reference URL\r\n * This is required to work around how Safari and iOS webviews handle gradient URLS under certain conditions\r\n * If a page is using a client-side routing library which makes use of the HTML <base> tag,\r\n * Safari won't be able to render SVG gradients properly (as they are referenced by URLs)\r\n * More info on the problem:\r\n * https://stackoverflow.com/questions/19742805/angular-and-svg-filters/19753427#19753427\r\n * https://github.com/jaames/iro.js/issues/18\r\n * https://github.com/jaames/iro.js/issues/45\r\n * https://github.com/jaames/iro.js/pull/89\r\n * @props url - SVG reference URL\r\n */\n\nfunction resolveSvgUrl(url) {\n  // Sniff useragent string to check if the user is running Safari\n  var ua = window.navigator.userAgent;\n  var isSafari = /^((?!chrome|android).)*safari/i.test(ua);\n  var isIos = /iPhone|iPod|iPad/i.test(ua);\n  var location = window.location;\n  return (isSafari || isIos) && BASE_ELEMENTS.length > 0 ? ((location.protocol) + \"//\" + (location.host) + (location.pathname) + (location.search) + url) : url;\n}\n/**\r\n * @desc Get the path commands to draw an svg arc\r\n * @props cx - arc center point x\r\n * @props cy - arc center point y\r\n * @props radius - arc radius\r\n * @props startAngle - arc start angle\r\n * @props endAngle - arc end angle\r\n */\n\nfunction getSvgArcPath(cx, cy, radius, startAngle, endAngle) {\n  var largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n  startAngle *= Math.PI / 180;\n  endAngle *= Math.PI / 180;\n  var x1 = cx + radius * Math.cos(endAngle);\n  var y1 = cy + radius * Math.sin(endAngle);\n  var x2 = cx + radius * Math.cos(startAngle);\n  var y2 = cy + radius * Math.sin(startAngle);\n  return (\"M \" + x1 + \" \" + y1 + \" A \" + radius + \" \" + radius + \" 0 \" + largeArcFlag + \" 0 \" + x2 + \" \" + y2);\n}\n/**\r\n * @desc Given a specifc (x, y) position, test if there's a handle there and return its index, else return null.\r\n *       This is used for components like the box and wheel which support multiple handles when multicolor is active\r\n * @props x - point x position\r\n * @props y - point y position\r\n * @props handlePositions - array of {x, y} coords for each handle\r\n */\n\nfunction getHandleAtPoint(props, x, y, handlePositions) {\n  for (var i = 0; i < handlePositions.length; i++) {\n    var dX = handlePositions[i].x - x;\n    var dY = handlePositions[i].y - y;\n    var dist = Math.sqrt(dX * dX + dY * dY);\n\n    if (dist < props.handleRadius) {\n      return i;\n    }\n  }\n\n  return null;\n}\n\nvar iroColorPickerOptionDefaults = {\n  width: 300,\n  height: 300,\n  handleRadius: 8,\n  handleSvg: null,\n  handleProps: {\n    x: 0,\n    y: 0\n  },\n  color: '#fff',\n  colors: [],\n  borderColor: '#fff',\n  borderWidth: 0,\n  wheelLightness: true,\n  wheelAngle: 0,\n  wheelDirection: 'anticlockwise',\n  layoutDirection: 'vertical',\n  sliderSize: null,\n  sliderMargin: 12,\n  padding: 6\n};\n\nvar SECONDARY_EVENTS = [\"mousemove\" /* MouseMove */, \"touchmove\" /* TouchMove */, \"mouseup\" /* MouseUp */, \"touchend\" /* TouchEnd */];\r\n// Base component class for iro UI components\r\n// This extends the Preact component class to allow them to react to mouse/touch input events by themselves\r\nvar IroComponentBase = /*@__PURE__*/(function (Component) {\n    function IroComponentBase(props) {\r\n        Component.call(this, props);\r\n        // Generate unique ID for the component\r\n        // This can be used to generate unique IDs for gradients, etc\r\n        this.uid = (Math.random() + 1).toString(36).substring(5);\r\n    }\n\n    if ( Component ) IroComponentBase.__proto__ = Component;\n    IroComponentBase.prototype = Object.create( Component && Component.prototype );\n    IroComponentBase.prototype.constructor = IroComponentBase;\r\n    IroComponentBase.prototype.render = function render (props) {\r\n        var eventHandler = this.handleEvent.bind(this);\r\n        var rootProps = {\r\n            onMouseDown: eventHandler,\r\n            onTouchStart: eventHandler\r\n        };\r\n        var isHorizontal = props.layoutDirection === 'horizontal';\r\n        var margin = props.margin === null ? props.sliderMargin : props.margin;\r\n        var rootStyles = {\r\n            overflow: 'visible',\r\n            display: isHorizontal ? 'inline-block' : 'block'\r\n        };\r\n        // first component shouldn't have any margin\r\n        if (props.index > 0) {\r\n            rootStyles[isHorizontal ? 'marginLeft' : 'marginTop'] = margin;\r\n        }\r\n        return (h(d, null, props.children(this.uid, rootProps, rootStyles)));\r\n    };\r\n    // More info on handleEvent:\r\n    // https://medium.com/@WebReflection/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38\r\n    // TL;DR this lets us have a single point of entry for multiple events, and we can avoid callback/binding hell\r\n    IroComponentBase.prototype.handleEvent = function handleEvent (e) {\n        var this$1 = this;\n\r\n        var inputHandler = this.props.onInput;\r\n        // Get the screen position of the component\r\n        var bounds = this.base.getBoundingClientRect();\r\n        // Prefect default browser action\r\n        e.preventDefault();\r\n        // Detect if the event is a touch event by checking if it has the `touches` property\r\n        // If it is a touch event, use the first touch input\r\n        var point = e.touches ? e.changedTouches[0] : e;\r\n        var x = point.clientX - bounds.left;\r\n        var y = point.clientY - bounds.top;\r\n        switch (e.type) {\r\n            case \"mousedown\" /* MouseDown */:\r\n            case \"touchstart\" /* TouchStart */:\r\n                SECONDARY_EVENTS.forEach(function (event) {\r\n                    document.addEventListener(event, this$1, { passive: false });\r\n                });\r\n                inputHandler(x, y, 0 /* Start */);\r\n                break;\r\n            case \"mousemove\" /* MouseMove */:\r\n            case \"touchmove\" /* TouchMove */:\r\n                inputHandler(x, y, 1 /* Move */);\r\n                break;\r\n            case \"mouseup\" /* MouseUp */:\r\n            case \"touchend\" /* TouchEnd */:\r\n                inputHandler(x, y, 2 /* End */);\r\n                SECONDARY_EVENTS.forEach(function (event) {\r\n                    document.removeEventListener(event, this$1);\r\n                });\r\n                break;\r\n        }\r\n    };\n\n    return IroComponentBase;\n}(m));\n\nfunction IroHandle(props) {\r\n    var radius = props.r;\r\n    var url = props.url;\r\n    return (h(\"svg\", { className: (\"IroHandle IroHandle--\" + (props.index) + \" \" + (props.isActive ? 'IroHandle--isActive' : '')), x: props.x, y: props.y, style: {\r\n            overflow: 'visible'\r\n        } },\r\n        url && (h(\"use\", Object.assign({ xlinkHref: resolveSvgUrl(url) }, props.props))),\r\n        !url && (h(\"circle\", { r: radius, fill: \"none\", \"stroke-width\": 2, stroke: \"#000\" })),\r\n        !url && (h(\"circle\", { r: radius - 2, fill: props.fill, \"stroke-width\": 2, stroke: \"#fff\" }))));\r\n}\r\nIroHandle.defaultProps = {\r\n    fill: 'none',\r\n    x: 0,\r\n    y: 0,\r\n    r: 8,\r\n    url: null,\r\n    props: { x: 0, y: 0 }\r\n};\n\nvar HUE_STEPS = Array.apply(null, { length: 360 }).map(function (_, index) { return index; });\r\nfunction IroWheel(props) {\r\n    var ref = getWheelDimensions(props);\n    var width = ref.width;\n    var radius = ref.radius;\n    var cx = ref.cx;\n    var cy = ref.cy;\r\n    var colors = props.colors;\n    var borderWidth = props.borderWidth;\r\n    var colorPicker = props.parent;\r\n    var activeColor = props.color;\r\n    var hsv = activeColor.hsv;\r\n    var handlePositions = colors.map(function (color) { return getWheelHandlePosition(props, color); });\r\n    function handleInput(x, y, inputType) {\r\n        if (inputType === 0 /* Start */) {\r\n            // getHandleAtPoint() returns the index for the handle if the point 'hits' it, or null otherwise\r\n            var activeHandle = getHandleAtPoint(props, x, y, handlePositions);\r\n            // If the input hit a handle, set it as the active handle, but don't update the color\r\n            if (activeHandle !== null) {\r\n                colorPicker.setActiveColor(activeHandle);\r\n            }\r\n            // If the input didn't hit a handle, set the currently active handle to that position\r\n            else {\r\n                colorPicker.inputActive = true;\r\n                activeColor.hsv = getWheelValueFromInput(props, x, y);\r\n                props.onInput(inputType);\r\n            }\r\n        }\r\n        // move is fired when the user has started dragging\r\n        else if (inputType === 1 /* Move */) {\r\n            colorPicker.inputActive = true;\r\n            activeColor.hsv = getWheelValueFromInput(props, x, y);\r\n        }\r\n        // let the color picker fire input:start, input:move or input:end events\r\n        props.onInput(inputType);\r\n    }\r\n    return (h(IroComponentBase, Object.assign({}, props, { onInput: handleInput }), function (uid, rootProps, rootStyles) { return (h(\"svg\", Object.assign({}, rootProps, { className: \"IroWheel\", width: width, height: width, style: rootStyles }),\r\n        h(\"defs\", null,\r\n            h(\"radialGradient\", { id: uid },\r\n                h(\"stop\", { offset: \"0%\", \"stop-color\": \"#fff\" }),\r\n                h(\"stop\", { offset: \"100%\", \"stop-color\": \"#fff\", \"stop-opacity\": \"0\" }))),\r\n        h(\"g\", { className: \"IroWheelHue\", \"stroke-width\": radius, fill: \"none\" }, HUE_STEPS.map(function (angle) { return (h(\"path\", { key: angle, d: getSvgArcPath(cx, cy, radius / 2, angle, angle + 1.5), stroke: (\"hsl(\" + (translateWheelAngle(props, angle)) + \", 100%, 50%)\") })); })),\r\n        h(\"circle\", { className: \"IroWheelSaturation\", cx: cx, cy: cy, r: radius, fill: (\"url(\" + (resolveSvgUrl('#' + uid)) + \")\") }),\r\n        props.wheelLightness && (h(\"circle\", { className: \"IroWheelLightness\", cx: cx, cy: cy, r: radius, fill: \"#000\", opacity: 1 - hsv.v / 100 })),\r\n        h(\"circle\", { className: \"IroWheelBorder\", cx: cx, cy: cy, r: radius, fill: \"none\", stroke: props.borderColor, \"stroke-width\": borderWidth }),\r\n        colors.filter(function (color) { return color !== activeColor; }).map(function (color) { return (h(IroHandle, { isActive: false, index: color.index, fill: color.hslString, r: props.handleRadius, url: props.handleSvg, props: props.handleProps, x: handlePositions[color.index].x, y: handlePositions[color.index].y })); }),\r\n        h(IroHandle, { isActive: true, index: activeColor.index, fill: activeColor.hslString, r: props.handleRadius, url: props.handleSvg, props: props.handleProps, x: handlePositions[activeColor.index].x, y: handlePositions[activeColor.index].y }))); }));\r\n}\n\nfunction IroSlider(props) {\r\n    var activeColor = props.color;\r\n    var ref = getSliderDimensions(props);\n    var width = ref.width;\n    var height = ref.height;\n    var radius = ref.radius;\r\n    var handlePos = getSliderHandlePosition(props, activeColor);\r\n    var gradient = getSliderGradient(props, activeColor);\r\n    var isAlpha = props.sliderType === 'alpha';\r\n    function handleInput(x, y, type) {\r\n        var value = getSliderValueFromInput(props, x, y);\r\n        props.parent.inputActive = true;\r\n        activeColor[props.sliderType] = value;\r\n        props.onInput(type);\r\n    }\r\n    return (h(IroComponentBase, Object.assign({}, props, { onInput: handleInput }), function (uid, rootProps, rootStyles) { return (h(\"svg\", Object.assign({}, rootProps, { className: \"IroSlider\", width: width, height: height, style: rootStyles }),\r\n        h(\"defs\", null,\r\n            h(\"linearGradient\", Object.assign({ id: 'g' + uid }, getSliderGradientCoords(props)), gradient.map(function (ref) {\n                var offset = ref[0];\n                var color = ref[1];\n\n                return (h(\"stop\", { offset: (offset + \"%\"), \"stop-color\": color }));\n        })),\r\n            isAlpha && (h(\"pattern\", { id: 'b' + uid, width: \"8\", height: \"8\", patternUnits: \"userSpaceOnUse\" },\r\n                h(\"rect\", { x: \"0\", y: \"0\", width: \"8\", height: \"8\", fill: \"#fff\" }),\r\n                h(\"rect\", { x: \"0\", y: \"0\", width: \"4\", height: \"4\", fill: \"#ccc\" }),\r\n                h(\"rect\", { x: \"4\", y: \"4\", width: \"4\", height: \"4\", fill: \"#ccc\" }))),\r\n            isAlpha && (h(\"pattern\", { id: 'f' + uid, width: \"100%\", height: \"100%\" },\r\n                h(\"rect\", { x: \"0\", y: \"0\", width: \"100%\", height: \"100%\", fill: (\"url(\" + (resolveSvgUrl('#b' + uid)) + \")\") }),\r\n                \" }\",\r\n                h(\"rect\", { x: \"0\", y: \"0\", width: \"100%\", height: \"100%\", fill: (\"url(\" + (resolveSvgUrl('#g' + uid)) + \")\") })))),\r\n        h(\"rect\", { className: \"IroSliderBg\", rx: radius, ry: radius, x: props.borderWidth / 2, y: props.borderWidth / 2, width: width - props.borderWidth, height: height - props.borderWidth, \"stroke-width\": props.borderWidth, stroke: props.borderColor, fill: (\"url(\" + (resolveSvgUrl((isAlpha ? '#f' : '#g') + uid)) + \")\") }),\r\n        h(IroHandle, { isActive: true, index: activeColor.index, r: props.handleRadius, url: props.handleSvg, props: props.handleProps, x: handlePos.x, y: handlePos.y }))); }));\r\n}\r\nIroSlider.defaultProps = Object.assign({}, sliderDefaultOptions);\n\n// Turn a component into a widget\r\n// This returns a factory function that can be used to create an instance of the widget component\r\n// The first function param is a DOM element or CSS selector for the element to mount to,\r\n// The second param is for config options which are passed to the component as props\r\n// This factory function can also delay mounting the element into the DOM until the page is ready\r\nfunction createWidget(WidgetComponent) {\r\n    var widgetFactory = function (parent, props) {\r\n        var widget; // will become an instance of the widget component class\r\n        var widgetRoot = document.createElement('div');\r\n        // Render widget into a temp DOM node\r\n        I(h(WidgetComponent, Object.assign({}, {ref: function (ref) { return widget = ref; }},\r\n            props)), widgetRoot);\r\n        function mountWidget() {\r\n            var container = parent instanceof Element ? parent : document.querySelector(parent);\r\n            container.appendChild(widget.base);\r\n            widget.onMount(container);\r\n        }\r\n        // Mount it into the DOM when the page document is ready\r\n        if (document.readyState !== 'loading') {\r\n            mountWidget();\r\n        }\r\n        else {\r\n            document.addEventListener('DOMContentLoaded', mountWidget);\r\n        }\r\n        return widget;\r\n    };\r\n    // Allow the widget factory to inherit component prototype + static class methods\r\n    // This makes it easier for plugin authors to extend the base widget component\r\n    widgetFactory.prototype = WidgetComponent.prototype;\r\n    Object.assign(widgetFactory, WidgetComponent);\r\n    // Add reference to base component too\r\n    widgetFactory.__component = WidgetComponent;\r\n    return widgetFactory;\r\n}\n\nvar IroColorPicker = /*@__PURE__*/(function (Component) {\n    function IroColorPicker(props) {\n        var this$1 = this;\n\r\n        Component.call(this, props);\r\n        this.colors = [];\r\n        this.inputActive = false;\r\n        this.events = {};\r\n        this.activeEvents = {};\r\n        this.deferredEvents = {};\r\n        this.id = props.id;\r\n        var colors = props.colors.length > 0 ? props.colors : [props.color];\r\n        colors.forEach(function (colorValue) { return this$1.addColor(colorValue); });\r\n        this.setActiveColor(0);\r\n        // Pass all the props into the component's state,\r\n        // Except we want to add the color object and make sure that refs aren't passed down to children\r\n        this.state = Object.assign({}, props,\r\n            {color: this.color,\r\n            colors: this.colors,\r\n            layout: props.layout});\r\n    }\n\n    if ( Component ) IroColorPicker.__proto__ = Component;\n    IroColorPicker.prototype = Object.create( Component && Component.prototype );\n    IroColorPicker.prototype.constructor = IroColorPicker;\r\n    // Plubic multicolor API\r\n    /**\r\n    * @desc Add a color to the color picker\r\n    * @param color new color to add\r\n    * @param index optional color index\r\n    */\r\n    IroColorPicker.prototype.addColor = function addColor (color, index) {\n        if ( index === void 0 ) index = this.colors.length;\n\r\n        // Create a new iro.Color\r\n        // Also bind it to onColorChange, so whenever the color changes it updates the color picker\r\n        var newColor = new IroColor(color, this.onColorChange.bind(this));\r\n        // Insert color @ the given index\r\n        this.colors.splice(index, 0, newColor);\r\n        // Reindex colors\r\n        this.colors.forEach(function (color, index) { return color.index = index; });\r\n        // Update picker state if necessary\r\n        if (this.state) {\r\n            this.setState({ colors: this.colors });\r\n        }\r\n        // Fire color init event\r\n        this.deferredEmit('color:init', newColor);\r\n    };\r\n    /**\r\n     * @desc Remove a color from the color picker\r\n     * @param index color index\r\n     */\r\n    IroColorPicker.prototype.removeColor = function removeColor (index) {\r\n        var color = this.colors.splice(index, 1)[0];\r\n        // Destroy the color object -- this unbinds it from the color picker\r\n        color.unbind();\r\n        // Reindex colors\r\n        this.colors.forEach(function (color, index) { return color.index = index; });\r\n        // Update picker state if necessary\r\n        if (this.state) {\r\n            this.setState({ colors: this.colors });\r\n        }\r\n        // If the active color was removed, default active color to 0\r\n        if (color.index === this.color.index) {\r\n            this.setActiveColor(0);\r\n        }\r\n        // Fire color remove event\r\n        this.emit('color:remove', color);\r\n    };\r\n    /**\r\n     * @desc Set the currently active color\r\n     * @param index color index\r\n     */\r\n    IroColorPicker.prototype.setActiveColor = function setActiveColor (index) {\r\n        this.color = this.colors[index];\r\n        if (this.state) {\r\n            this.setState({ color: this.color });\r\n        }\r\n        // Fire color switch event\r\n        this.emit('color:setActive', this.color);\r\n    };\r\n    /**\r\n     * @desc Replace all of the current colorPicker colors\r\n     * @param newColorValues list of new colors to add\r\n     */\r\n    IroColorPicker.prototype.setColors = function setColors (newColorValues) {\n        var this$1 = this;\n\r\n        // Unbind color events\r\n        this.colors.forEach(function (color) { return color.unbind(); });\r\n        // Destroy old colors\r\n        this.colors = [];\r\n        // Add new colors\r\n        newColorValues.forEach(function (colorValue) { return this$1.addColor(colorValue); });\r\n        // Reset active color\r\n        this.setActiveColor(0);\r\n        this.emit('color:setAll', this.colors);\r\n    };\r\n    // Public ColorPicker events API\r\n    /**\r\n     * @desc Set a callback function for an event\r\n     * @param eventList event(s) to listen to\r\n     * @param callback - Function called when the event is fired\r\n     */\r\n    IroColorPicker.prototype.on = function on (eventList, callback) {\n        var this$1 = this;\n\r\n        var events = this.events;\r\n        // eventList can be an eventType string or an array of eventType strings\r\n        (!Array.isArray(eventList) ? [eventList] : eventList).forEach(function (eventType) {\r\n            // Add event callback\r\n            (events[eventType] || (events[eventType] = [])).push(callback);\r\n            // Call deferred events\r\n            // These are events that can be stored until a listener for them is added\r\n            if (this$1.deferredEvents[eventType]) {\r\n                // Deffered events store an array of arguments from when the event was called\r\n                this$1.deferredEvents[eventType].forEach(function (args) {\r\n                    callback.apply(null, args);\r\n                });\r\n                // Clear deferred events\r\n                this$1.deferredEvents[eventType] = [];\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @desc Remove a callback function for an event added with on()\r\n     * @param eventList - event(s) to listen to\r\n     * @param callback - original callback function to remove\r\n     */\r\n    IroColorPicker.prototype.off = function off (eventList, callback) {\n        var this$1 = this;\n\r\n        (!Array.isArray(eventList) ? [eventList] : eventList).forEach(function (eventType) {\r\n            var callbackList = this$1.events[eventType];\r\n            // this.emitHook('event:off', eventType, callback);\r\n            if (callbackList)\r\n                { callbackList.splice(callbackList.indexOf(callback), 1); }\r\n        });\r\n    };\r\n    /**\r\n     * @desc Emit an event\r\n     * @param eventType event to emit\r\n     */\r\n    IroColorPicker.prototype.emit = function emit (eventType) {\n        var this$1 = this;\n        var args = [], len = arguments.length - 1;\n        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\r\n        var activeEvents = this.activeEvents;\r\n        var isEventActive = activeEvents.hasOwnProperty(eventType) ? activeEvents[eventType] : false;\r\n        // Prevent event callbacks from firing if the event is already active\r\n        // This stops infinite loops if something in an event callback causes the same event to be fired again\r\n        // (e.g. setting the color inside a color:change callback)\r\n        if (!isEventActive) {\r\n            activeEvents[eventType] = true;\r\n            var callbackList = this.events[eventType] || [];\r\n            callbackList.forEach(function (fn) { return fn.apply(this$1, args); });\r\n            activeEvents[eventType] = false;\r\n        }\r\n    };\r\n    /**\r\n     * @desc Emit an event now, or save it for when the relevent event listener is added\r\n     * @param eventType - The name of the event to emit\r\n     */\r\n    IroColorPicker.prototype.deferredEmit = function deferredEmit (eventType) {\n        var ref;\n\n        var args = [], len = arguments.length - 1;\n        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\r\n        var deferredEvents = this.deferredEvents;\r\n        (ref = this).emit.apply(ref, [ eventType ].concat( args ));\r\n        (deferredEvents[eventType] || (deferredEvents[eventType] = [])).push(args);\r\n    };\r\n    // Public utility methods\r\n    IroColorPicker.prototype.setOptions = function setOptions (newOptions) {\r\n        this.setState(Object.assign({}, this.state, newOptions));\r\n    };\r\n    /**\r\n     * @desc Resize the color picker\r\n     * @param width - new width\r\n     */\r\n    IroColorPicker.prototype.resize = function resize (width) {\r\n        this.setOptions({ width: width });\r\n    };\r\n    /**\r\n     * @desc Reset the color picker to the initial color provided in the color picker options\r\n     */\r\n    IroColorPicker.prototype.reset = function reset () {\r\n        this.colors.forEach(function (color) { return color.reset(); });\r\n        this.setState({ colors: this.colors });\r\n    };\r\n    /**\r\n     * @desc Called by the createWidget wrapper when the element is mounted into the page\r\n     * @param container - the container element for this ColorPicker instance\r\n     */\r\n    IroColorPicker.prototype.onMount = function onMount (container) {\r\n        this.el = container;\r\n        this.deferredEmit('mount', this);\r\n    };\r\n    // Internal methods\r\n    /**\r\n     * @desc React to a color update\r\n     * @param color - current color\r\n     * @param changes - shows which h,s,v,a color channels changed\r\n     */\r\n    IroColorPicker.prototype.onColorChange = function onColorChange (color, changes) {\r\n        this.setState({ color: this.color });\r\n        if (this.inputActive) {\r\n            this.inputActive = false;\r\n            this.emit('input:change', color, changes);\r\n        }\r\n        this.emit('color:change', color, changes);\r\n    };\r\n    /**\r\n     * @desc Handle input from a UI control element\r\n     * @param type - event type\r\n     */\r\n    IroColorPicker.prototype.emitInputEvent = function emitInputEvent (type) {\r\n        if (type === 0 /* Start */) {\r\n            this.emit('input:start', this.color);\r\n        }\r\n        else if (type === 1 /* Move */) {\r\n            this.emit('input:move', this.color);\r\n        }\r\n        else if (type === 2 /* End */) {\r\n            this.emit('input:end', this.color);\r\n        }\r\n    };\r\n    IroColorPicker.prototype.render = function render (props, state) {\n        var this$1 = this;\n\r\n        var layout = state.layout;\r\n        // use layout shorthands\r\n        if (!Array.isArray(layout)) {\r\n            switch (layout) {\r\n                // TODO: implement some?\r\n                default:\r\n                    layout = [\r\n                        { component: IroWheel },\r\n                        { component: IroSlider } ];\r\n            }\r\n            // add transparency slider to the layout\r\n            if (state.transparency) {\r\n                layout.push({\r\n                    component: IroSlider,\r\n                    options: {\r\n                        sliderType: 'alpha'\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return (h(\"div\", { class: \"IroColorPicker\", id: state.id, style: {\r\n                display: state.display\r\n            } }, layout.map(function (ref, componentIndex) {\n                var UiComponent = ref.component;\n                var options = ref.options;\n\n                return (h(UiComponent, Object.assign({}, state, options, { ref: undefined, onInput: this$1.emitInputEvent.bind(this$1), parent: this$1, index: componentIndex })));\n        })));\r\n    };\n\n    return IroColorPicker;\n}(m));\r\nIroColorPicker.defaultProps = Object.assign({}, iroColorPickerOptionDefaults,\r\n    {colors: [],\r\n    display: 'block',\r\n    id: null,\r\n    layout: 'default',\r\n    margin: null});\r\nvar IroColorPickerWidget = createWidget(IroColorPicker);\n\nfunction IroBox(props) {\r\n    var ref = getBoxDimensions(props);\n    var width = ref.width;\n    var height = ref.height;\n    var radius = ref.radius;\r\n    var colors = props.colors;\r\n    var colorPicker = props.parent;\r\n    var activeColor = props.color;\r\n    var gradients = getBoxGradients(props, activeColor);\r\n    var handlePositions = colors.map(function (color) { return getBoxHandlePosition(props, color); });\r\n    function handleInput(x, y, inputType) {\r\n        if (inputType === 0 /* Start */) {\r\n            // getHandleAtPoint() returns the index for the handle if the point 'hits' it, or null otherwise\r\n            var activeHandle = getHandleAtPoint(props, x, y, handlePositions);\r\n            // If the input hit a handle, set it as the active handle, but don't update the color\r\n            if (activeHandle !== null) {\r\n                colorPicker.setActiveColor(activeHandle);\r\n            }\r\n            // If the input didn't hit a handle, set the currently active handle to that position\r\n            else {\r\n                colorPicker.inputActive = true;\r\n                activeColor.hsv = getBoxValueFromInput(props, x, y);\r\n                props.onInput(inputType);\r\n            }\r\n        }\r\n        // move is fired when the user has started dragging\r\n        else if (inputType === 1 /* Move */) {\r\n            colorPicker.inputActive = true;\r\n            activeColor.hsv = getBoxValueFromInput(props, x, y);\r\n        }\r\n        // let the color picker fire input:start, input:move or input:end events\r\n        props.onInput(inputType);\r\n    }\r\n    return (h(IroComponentBase, Object.assign({}, props, { onInput: handleInput }), function (uid, rootProps, rootStyles) { return (h(\"svg\", Object.assign({}, rootProps, { className: \"IroBox\", width: width, height: height, style: rootStyles }),\r\n        h(\"defs\", null,\r\n            h(\"linearGradient\", { id: 's' + uid, x1: \"0%\", y1: \"0%\", x2: \"100%\", y2: \"0%\" }, gradients[0].map(function (ref) {\n                var offset = ref[0];\n                var color = ref[1];\n\n                return (h(\"stop\", { offset: (offset + \"%\"), \"stop-color\": color }));\n        })),\r\n            h(\"linearGradient\", { id: 'l' + uid, x1: \"0%\", y1: \"0%\", x2: \"0%\", y2: \"100%\" }, gradients[1].map(function (ref) {\n                var offset = ref[0];\n                var color = ref[1];\n\n                return (h(\"stop\", { offset: (offset + \"%\"), \"stop-color\": color }));\n        })),\r\n            h(\"pattern\", { id: 'f' + uid, width: \"100%\", height: \"100%\" },\r\n                h(\"rect\", { x: \"0\", y: \"0\", width: \"100%\", height: \"100%\", fill: (\"url(\" + (resolveSvgUrl('#s' + uid)) + \")\") }),\r\n                \" }\",\r\n                h(\"rect\", { x: \"0\", y: \"0\", width: \"100%\", height: \"100%\", fill: (\"url(\" + (resolveSvgUrl('#l' + uid)) + \")\") }))),\r\n        h(\"rect\", { rx: radius, ry: radius, x: props.borderWidth / 2, y: props.borderWidth / 2, width: width - props.borderWidth, height: height - props.borderWidth, \"stroke-width\": props.borderWidth, stroke: props.borderColor, fill: (\"url(\" + (resolveSvgUrl('#f' + uid)) + \")\") }),\r\n        colors.filter(function (color) { return color !== activeColor; }).map(function (color) { return (h(IroHandle, { isActive: false, index: color.index, fill: color.hslString, r: props.handleRadius, url: props.handleSvg, props: props.handleProps, x: handlePositions[color.index].x, y: handlePositions[color.index].y })); }),\r\n        h(IroHandle, { isActive: true, index: activeColor.index, fill: activeColor.hslString, r: props.handleRadius, url: props.handleSvg, props: props.handleProps, x: handlePositions[activeColor.index].x, y: handlePositions[activeColor.index].y }))); }));\r\n}\n\nvar index = {\r\n    Color: IroColor,\r\n    ColorPicker: IroColorPickerWidget,\r\n    ui: {\r\n        h: h,\r\n        ComponentBase: IroComponentBase,\r\n        Handle: IroHandle,\r\n        Slider: IroSlider,\r\n        Wheel: IroWheel,\r\n        Box: IroBox,\r\n    },\r\n    version: \"5.1.5\",\r\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n\n\n//# sourceURL=webpack:///./node_modules/@jaames/iro/dist/iro.es.js?");

/***/ }),

/***/ "./src/Colorpicker.js":
/*!****************************!*\
  !*** ./src/Colorpicker.js ***!
  \****************************/
/*! exports provided: colorpicker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"colorpicker\", function() { return colorpicker; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ \"./src/Utils.js\");\n/* harmony import */ var _jaames_iro__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jaames/iro */ \"./node_modules/@jaames/iro/dist/iro.es.js\");\n\r\n\r\n\r\n\r\nvar colorpicker = {\r\n    openColorPicker(){\r\n        if(!this.map.getContainer().contains(this.colorpicker.container)) {\r\n            if(this.colorpicker.container){\r\n                this.map.getContainer().appendChild(this.colorpicker.container);\r\n            }else {\r\n                this._createColorPickerContainer();\r\n            }\r\n        }\r\n    },\r\n    closeColorPicker(){\r\n        if(this.map.getContainer().contains(this.colorpicker.container)) {\r\n            this.map.getContainer().removeChild(this.colorpicker.container);\r\n        }\r\n        this.map.pm.Toolbar.buttons.setColor.toggle(false);\r\n    },\r\n    _createColorPickerContainer(){\r\n        var colorPickerContainer = L.DomUtil.create('div','colorPicker');\r\n\r\n        var dragElm = L.DomUtil.create('div','',colorPickerContainer);\r\n        dragElm.id=\"dragColorbox\";\r\n        Object(_Utils__WEBPACK_IMPORTED_MODULE_0__[\"dragElement\"])(colorPickerContainer,dragElm,this.map.getContainer());\r\n\r\n        var closeBtn = L.DomUtil.create('div','closeBtn',colorPickerContainer);\r\n        L.DomEvent.on(closeBtn,'click',this.closeColorPicker,this);\r\n\r\n        var colorPickerTypeBox = L.DomUtil.create('div','colorPickerTypeBox',colorPickerContainer);\r\n        this.colorpicker.type.active = 'fill';\r\n\r\n        this.colorpicker.type.fill = L.DomUtil.create('div','active',colorPickerTypeBox);\r\n        this.colorpicker.type.fill.innerHTML = \"<span>Fill</span><div id='colorpickerColorFill' class='colorpickerColor'></div>\";\r\n        L.DomEvent.on(this.colorpicker.type.fill,'click',this._changeColorPickerFill,this);\r\n        this.colorpicker.type.border = L.DomUtil.create('div','',colorPickerTypeBox);\r\n        this.colorpicker.type.border.innerHTML = \"<span>Border</span><div id='colorpickerColorBorder' class='colorpickerColor'></div>\";\r\n        L.DomEvent.on(this.colorpicker.type.border,'click',this._changeColorPickerBorder,this);\r\n\r\n        var colorBox = L.DomUtil.create('div','colorPickerColorBox',colorPickerContainer);\r\n        this.colorpicker.colorBox = colorBox;\r\n\r\n        this.colorpicker.container = colorPickerContainer;\r\n        L.DomEvent.disableClickPropagation(this.colorpicker.container);\r\n        this.map.getContainer().appendChild(this.colorpicker.container);\r\n        this.colorpicker.iro = new _jaames_iro__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ColorPicker(\".colorPicker\", {\r\n            width: this.options.width,\r\n            color: this.colorpicker.color[this.colorpicker.type.active],\r\n            borderWidth: 1,\r\n            borderColor: \"#fff\",\r\n            sliderSize: 15,\r\n            transparency: true\r\n        });\r\n\r\n        this.colorpicker.iro.color.set(this.colorpicker.color[this.colorpicker.type.active]);\r\n        this.colorpicker.iro.color.alpha = this.colorpicker.opacity[this.colorpicker.type.active];\r\n        var that = this;\r\n        this.colorpicker.iro.on([\"color:init\", \"color:change\"], function(color){\r\n            colorBox.style.backgroundColor = color.hex8String;\r\n\r\n            var white = new _jaames_iro__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Color(\"#fff\");\r\n            var visibleColor = new _jaames_iro__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Color(Object(_Utils__WEBPACK_IMPORTED_MODULE_0__[\"rgba2rgb\"])(white.rgb,color.rgba));\r\n            var opositeColor = new _jaames_iro__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Color(Object(_Utils__WEBPACK_IMPORTED_MODULE_0__[\"invertColor\"])(visibleColor.hexString,true));\r\n            colorBox.style.color = opositeColor.hexString;\r\n\r\n            if(color.alpha == 1 || color.alpha == 0){\r\n                colorBox.innerHTML = color.hexString;\r\n            }else{\r\n                colorBox.innerHTML = color.hex8String;\r\n            }\r\n\r\n            if(!that.colorpicker.noEvent) {\r\n                that.colorpicker.color[that.colorpicker.type.active] = color.hexString;\r\n                that.colorpicker.opacity[that.colorpicker.type.active] = color.alpha;\r\n\r\n                var borderColorDiv = L.DomUtil.get(\"colorpickerColorBorder\");\r\n                borderColorDiv.style.backgroundColor = that.colorpicker.color.border;\r\n                var fillColorDiv = L.DomUtil.get(\"colorpickerColorFill\");\r\n                fillColorDiv.style.backgroundColor = that.colorpicker.color.fill;\r\n\r\n            }\r\n            that._updatePMColor();\r\n        });\r\n        if(this.options.pickerPosition) {\r\n            this.setPosition(this.options.pickerPosition);\r\n        }\r\n\r\n    },\r\n    _changeColorPickerFill(){\r\n        this.setColorPickerType('border');\r\n    },\r\n    _changeColorPickerBorder(){\r\n        this.setColorPickerType('fill');\r\n    },\r\n    setColorPickerType(type){\r\n        this.colorpicker.type.fill.className = \"\";\r\n        this.colorpicker.type.border.className = \"\";\r\n\r\n        var borderColorDiv = L.DomUtil.get(\"colorpickerColorBorder\");\r\n        borderColorDiv.style.backgroundColor = this.colorpicker.color.border;\r\n        var fillColorDiv = L.DomUtil.get(\"colorpickerColorFill\");\r\n        fillColorDiv.style.backgroundColor = this.colorpicker.color.fill;\r\n\r\n        if(type === \"fill\"){\r\n            this.colorpicker.type.active = \"border\";\r\n        }else{\r\n            this.colorpicker.type.active = \"fill\";\r\n        }\r\n\r\n        L.DomUtil.addClass(this.colorpicker.type[this.colorpicker.type.active],'active');\r\n        this.colorpicker.noEvent = true;\r\n        this.colorpicker.iro.color.set(this.colorpicker.color[this.colorpicker.type.active]);\r\n        this.colorpicker.iro.color.alpha = this.colorpicker.opacity[this.colorpicker.type.active];\r\n        this.colorpicker.noEvent = false;\r\n    },\r\n    getColorPickerType(){\r\n      return this.colorpicker.type.active;\r\n    },\r\n    getColor(){\r\n        return this.colorpicker.color;\r\n    },\r\n    setColor(color){\r\n        if(color.fill){\r\n            this.colorpicker.color.fill = color.fill;\r\n        }\r\n        if(color.border){\r\n            this.colorpicker.color.border = color.border;\r\n        }\r\n        this._updateColorpicker();\r\n        this._updatePMColor();\r\n    },\r\n    setOpacity(opacity){\r\n        if(opacity.fill){\r\n            this.colorpicker.opacity.fill = opacity.fill;\r\n        }\r\n        if(opacity.border){\r\n            this.colorpicker.opacity.border = opacity.border;\r\n        }\r\n        this._updateColorpicker();\r\n        this._updatePMColor();\r\n    },\r\n    getOpacity(){\r\n        return this.colorpicker.opacity;\r\n    },\r\n    getStyle(){\r\n        return {\r\n            color: this.colorpicker.color.border,\r\n            opacity: this.colorpicker.opacity.border,\r\n            fillColor: this.colorpicker.color.fill,\r\n            fillOpacity: this.colorpicker.opacity.fill,\r\n        };\r\n    },\r\n    setStyle(options){\r\n        if(options.color) {\r\n            this.colorpicker.color.border = options.color;\r\n        }\r\n        if(options.opacity) {\r\n            this.colorpicker.opacity.border = options.opacity;\r\n        }\r\n        if(options.fillColor) {\r\n            this.colorpicker.color.fill = options.fillColor;\r\n        }\r\n        if(options.fillOpacity) {\r\n            this.colorpicker.opacity.fill = options.fillOpacity;\r\n        }\r\n        this._updatePMColor();\r\n        this._updateColorpicker();\r\n    },\r\n    _updateColorpicker(){\r\n        this.colorpicker.iro.color.set(this.colorpicker.color[this.colorpicker.type.active]);\r\n        this.colorpicker.iro.color.alpha = this.colorpicker.opacity[this.colorpicker.type.active];\r\n\r\n\r\n        var borderColorDiv = L.DomUtil.get(\"colorpickerColorBorder\");\r\n        borderColorDiv.style.backgroundColor = this.colorpicker.color.border;\r\n        var fillColorDiv = L.DomUtil.get(\"colorpickerColorFill\");\r\n        fillColorDiv.style.backgroundColor = this.colorpicker.color.fill;\r\n    },\r\n    _updatePMColor(){\r\n        var map = this.map;\r\n        map.pm.setPathOptions(this.getStyle());\r\n        map.pm.Draw.options.hintlineStyle.color = this.getStyle().color;\r\n        map.pm.Draw.options.hintlineStyle.dashArray = [5,5];\r\n        map.pm.Draw.options.templineStyle.color =  this.getStyle().color;\r\n\r\n        var tempLineStyle = this.getStyle();\r\n\r\n\r\n        map.pm.Draw.Rectangle.setPathOptions(this.getStyle());\r\n        if(map.pm.Draw.Rectangle._layer) {\r\n            map.pm.Draw.Rectangle._layer.setStyle(this.getStyle());\r\n        }\r\n        map.pm.Draw.Circle.setPathOptions(this.getStyle());\r\n        if(map.pm.Draw.Circle._layer) {\r\n            map.pm.Draw.Circle._layer.setStyle(this.getStyle());\r\n            map.pm.Draw.Circle._hintline.setStyle(this.getStyle());\r\n        }\r\n        map.pm.Draw.Line.setPathOptions(this.getStyle());\r\n        if(map.pm.Draw.Line._layer) {\r\n            map.pm.Draw.Line._layer.setStyle(this.getStyle());\r\n            map.pm.Draw.Line._hintline.setStyle(tempLineStyle);\r\n        }\r\n        map.pm.Draw.Polygon.setPathOptions(this.getStyle());\r\n        if(map.pm.Draw.Polygon._layer) {\r\n            map.pm.Draw.Polygon._layer.setStyle(this.getStyle());\r\n            map.pm.Draw.Polygon._hintline.setStyle(tempLineStyle);\r\n        }\r\n\r\n        map.pm.Draw.CircleMarker.setPathOptions(this.getStyle());\r\n        if(map.pm.Draw.CircleMarker._hintMarker) {\r\n            map.pm.Draw.CircleMarker._hintMarker.setStyle(this.getStyle());\r\n        }\r\n    },\r\n    setPosition(options){\r\n        if(this.colorpicker.container) {\r\n            if (options.top != undefined) {\r\n                var top = options.top;\r\n                if (top < 5) {\r\n                    top = 5;\r\n                } else if (top > this.map.getContainer().clientHeight - this.colorpicker.container.clientHeight - 5) {\r\n                    top = this.map.getContainer().clientHeight - this.colorpicker.container.clientHeight - 5;\r\n                }\r\n\r\n                this.colorpicker.container.style.top = top + \"px\";\r\n            }\r\n            if (options.left != undefined) {\r\n                var left = options.left;\r\n                if (left < 5) {\r\n                    left = 5;\r\n                } else if (left > this.map.getContainer().clientWidth - this.colorpicker.container.clientWidth - 5) {\r\n                    left = this.map.getContainer().clientWidth - this.colorpicker.container.clientWidth - 5;\r\n                }\r\n                this.colorpicker.container.style.left = left + \"px\";\r\n            }\r\n        }\r\n    },\r\n    getPosition(){\r\n        return {\r\n            top: this.colorpicker.container.offsetTop,\r\n            left: this.colorpicker.container.offsetLeft,\r\n        }\r\n    }\r\n};\r\n\r\n\n\n//# sourceURL=webpack:///./src/Colorpicker.js?");

/***/ }),

/***/ "./src/Utils.js":
/*!**********************!*\
  !*** ./src/Utils.js ***!
  \**********************/
/*! exports provided: extendOptions, dragElement, rgba2rgb, invertColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extendOptions\", function() { return extendOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dragElement\", function() { return dragElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgba2rgb\", function() { return rgba2rgb; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"invertColor\", function() { return invertColor; });\nvar extendOptions = {\r\n    setPathOptions(options) {\r\n        this.options.pathOptions = options;\r\n        this.options.templineStyle = options;\r\n        this.options.hintlineStyle = options;\r\n    },\r\n    setHintPathOptions(options) {\r\n        this.options.templineStyle = options;\r\n        this.options.hintlineStyle = options;\r\n    },\r\n};\r\n\r\nfunction dragElement(box,dragelm,container) {\r\n    var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\r\n    dragelm.onmousedown = dragMouseDown;\r\n\r\n    function dragMouseDown(e) {\r\n        e = e || window.event;\r\n        e.preventDefault();\r\n        // get the mouse cursor position at startup:\r\n        pos3 = e.clientX;\r\n        pos4 = e.clientY;\r\n        document.onmouseup = closeDragElement;\r\n        // call a function whenever the cursor moves:\r\n        document.onmousemove = elementDrag;\r\n    }\r\n\r\n    function elementDrag(e) {\r\n        e = e || window.event;\r\n        e.preventDefault();\r\n        // calculate the new cursor position:\r\n        pos1 = pos3 - e.clientX;\r\n        pos2 = pos4 - e.clientY;\r\n        pos3 = e.clientX;\r\n        pos4 = e.clientY;\r\n\r\n\r\n        // set the element's new position:\r\n        if(box.offsetTop - pos2 >= 5 && box.offsetTop - pos2 <= container.clientHeight-box.clientHeight-5) {\r\n            box.style.top = (box.offsetTop - pos2) + \"px\";\r\n        }\r\n\r\n        if(box.offsetLeft - pos1 >= 5 && box.offsetLeft - pos1 <= container.clientWidth-box.clientWidth-5) {\r\n            box.style.left = box.offsetLeft - pos1 + \"px\";\r\n        }\r\n\r\n    }\r\n\r\n    function closeDragElement() {\r\n        /* stop moving when mouse button is released:*/\r\n        document.onmouseup = null;\r\n        document.onmousemove = null;\r\n    }\r\n\r\n}\r\n\r\nfunction rgba2rgb(RGB_background, RGBA_color){\r\n    var alpha = RGBA_color.a;\r\n\r\n    return {\r\n        r: (1 - alpha) * RGB_background.r + alpha * RGBA_color.r,\r\n        g: (1 - alpha) * RGB_background.g + alpha * RGBA_color.g,\r\n        b: (1 - alpha) * RGB_background.b + alpha * RGBA_color.b\r\n    }\r\n}\r\n\r\nfunction invertColor(hex, bw) {\r\n    if (hex.indexOf('#') === 0) {\r\n        hex = hex.slice(1);\r\n    }\r\n    // convert 3-digit hex to 6-digits.\r\n    if (hex.length === 3) {\r\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\r\n    }\r\n    if (hex.length !== 6) {\r\n        throw new Error('Invalid HEX color.');\r\n    }\r\n    var r = parseInt(hex.slice(0, 2), 16),\r\n        g = parseInt(hex.slice(2, 4), 16),\r\n        b = parseInt(hex.slice(4, 6), 16);\r\n    if (bw) {\r\n        // http://stackoverflow.com/a/3943023/112731\r\n        return (r * 0.299 + g * 0.587 + b * 0.114) > 186\r\n            ? '#000000'\r\n            : '#FFFFFF';\r\n    }\r\n    // invert color components\r\n    r = (255 - r).toString(16);\r\n    g = (255 - g).toString(16);\r\n    b = (255 - b).toString(16);\r\n    // pad each with zeros and return\r\n    return \"#\" + padZero(r) + padZero(g) + padZero(b);\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./src/Utils.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ \"./src/Utils.js\");\n/* harmony import */ var _Colorpicker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Colorpicker */ \"./src/Colorpicker.js\");\n\n\n\nL.PMColor =  L.Class.extend({\n    includes: [_Colorpicker__WEBPACK_IMPORTED_MODULE_1__[\"colorpicker\"]],\n    options: {\n        position: 'topleft',\n        text: {\n            pipette: \"Pipette\",\n            bucket: \"Bucket\",\n            close: \"Close\",\n            cancel: \"Cancel\",\n            title: \"Colortool\"\n        },\n        width: 180,\n        showPicker: false,\n    },\n    cssadded: false,\n    colorpicker: {\n        type:{active: 'fill'},\n        color: {\n            fill: '#3388ff',\n            border: '#3388ff'\n        },\n        opacity: {\n            fill: 0.2,\n            border: 1\n        }\n    },\n    initialize(map, options) {\n        this.map = map;\n        L.setOptions(this, options);\n\n        L.PM.Draw.Line.include(_Utils__WEBPACK_IMPORTED_MODULE_0__[\"extendOptions\"]);\n        L.PM.Draw.Polygon.include(_Utils__WEBPACK_IMPORTED_MODULE_0__[\"extendOptions\"]);\n        L.PM.Draw.Rectangle.include(_Utils__WEBPACK_IMPORTED_MODULE_0__[\"extendOptions\"]);\n        L.PM.Draw.Circle.include(_Utils__WEBPACK_IMPORTED_MODULE_0__[\"extendOptions\"]);\n        L.PM.Draw.CircleMarker.include(_Utils__WEBPACK_IMPORTED_MODULE_0__[\"extendOptions\"]);\n\n        this._createControl();\n\n        if(this.options.showPicker){\n            this.openColorPicker();\n        }\n    },\n    setText(text){\n        if(text.tooltips) {\n            if (text.tooltips.firstVertex) {\n                this.options.text.tooltips.firstVertex = text.tooltips.firstVertex;\n            }\n            if (text.tooltips.finish) {\n                this.options.text.tooltips.finish = text.tooltips.finish;\n            }\n        }\n        if(text.cancel){\n            this.options.text.cancel = text.cancel;\n        }\n    },\n    _createControl: function() {\n        var btnNameToReplace = \"setColor\";\n        this.map.options.position = this.map.pm.Toolbar.options.position;\n        this.map.pm.Toolbar.options[btnNameToReplace] = true;\n        this.lockContainer = L.DomUtil.create(\n            'div',\n            'leaflet-pm-toolbar leaflet-pm-options leaflet-bar leaflet-control'\n        );\n\n        const lockButton = {\n            className: 'control-icon leaflet-pm-icon-circle',\n            title: \"Colortool\",\n            onClick: () => {\n                this.openColorPicker();\n            },\n            afterClick: () => {\n                this.disablePipette();\n                this.disableBucket();\n                this._updateToolbarIcon();\n            },\n            tool: 'edit',\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n            actions: [],\n        };\n\n        this.toolbarBtn = new L.Control.PMButton(lockButton);\n        this.map.pm.Toolbar._addButton(btnNameToReplace, this.toolbarBtn);\n\n        var buttons =  this.map.pm.Toolbar.buttons;\n        var newbtnorder = {};\n        var insertAfterDrawDone = false;\n        var buttonBeforeReplace = false;\n        for(var btn in buttons){\n            if(!insertAfterDrawDone && buttonBeforeReplace) {\n                newbtnorder[btnNameToReplace] = buttons[btnNameToReplace];\n            }else if(btn == btnNameToReplace){\n                continue;\n            }\n            buttonBeforeReplace = btn === \"removalMode\";\n            newbtnorder[btn] = buttons[btn];\n        }\n        //if last btn\n        if(!newbtnorder[btnNameToReplace]){\n            newbtnorder[btnNameToReplace] = buttons[btnNameToReplace];\n        }\n\n        this.map.pm.Toolbar.buttons = newbtnorder;\n        this.map.pm.Toolbar._showHideButtons = this._extend(this.map.pm.Toolbar._showHideButtons,this._createActionBtn(this),this.map.pm.Toolbar);\n        this.map.pm.Toolbar._showHideButtons();\n\n\n    },\n    _createActionBtn: function(that){\n        return function() {\n            const actions = [\n                {\n                    name: 'bucket',\n                    text: that.options.text.bucket,\n                    className: 'leaflet-pm-toolbar action-icon icon-bucket',\n                    onClick() {\n                        that.disablePipette();\n                        that.enableBucket();\n                    },\n                },\n                {\n                    name: 'pipette',\n                    text: that.options.text.pipette,\n                    className: 'leaflet-pm-toolbar action-icon icon-pipette',\n                    onClick() {\n                        that.disableBucket();\n                        that.enablePipette();\n                    },\n                },\n                {\n                    name: 'close',\n                    text: that.options.text.close,\n                    onClick() {\n                        that.disableBucket();\n                        that.disablePipette();\n                        that._updateToolbarIcon();\n                        that.closeColorPicker();\n                    },\n                },\n                {\n                    name: 'cancel',\n                    text: that.options.text.cancel,\n                    onClick() {\n                        that.disableBucket();\n                        that.disablePipette();\n                        that._updateToolbarIcon();\n                        that.map.pm.Toolbar.buttons.setColor.toggle(false);\n                    },\n                },\n            ];\n\n\n            that._updateToolbarIcon();\n            var actionContainer = that.toolbarBtn.buttonsDomNode.children[1];\n            actionContainer.innerHTML = \"\";\n            actions.forEach(action => {\n                var name = action.name;\n                const actionNode = L.DomUtil.create(\n                    'a',\n                    `leaflet-pm-action action-${name}`,\n                    actionContainer\n                );\n\n                if (action.text) {\n                    actionNode.innerHTML = action.text;\n                } else {\n                    actionNode.innerHTML = \"Text not translated!\";\n                }\n\n                if(action.title){\n                    actionNode.title = action.title;\n                }else if(action.text){\n                    actionNode.title = action.text;\n                }\n\n                if(action.className) {\n                    actionNode.innerHTML = \"\";\n                    L.DomUtil.addClass(actionNode, action.className);\n                }\n\n\n                L.DomEvent.addListener(actionNode, 'click', action.onClick, that);\n                L.DomEvent.disableClickPropagation(actionNode);\n            });\n        }\n    },\n\n    _updateToolbarIcon(){\n        var buttonContainer = this.map.pm.Toolbar.buttons.setColor.buttonsDomNode.children[0];\n\n        buttonContainer.innerHTML = \"\";\n        const image = L.DomUtil.create('div', 'control-icon', buttonContainer);\n        image.setAttribute('title', this.options.text.title);\n\n        var mode = this.getMode();\n        if (mode === \"bucket\") {\n            L.DomUtil.addClass(image, \"icon-bucket\");\n        }else if(mode === \"pipette\"){\n            L.DomUtil.addClass(image, \"icon-pipette\");\n        }else{\n            L.DomUtil.addClass(image, \"icon-colorpicker\");\n        }\n        return buttonContainer;\n    },\n    _extend: function(fn,code,that){\n        return function(){\n            fn.apply(that,arguments);\n            code.apply(that,arguments);\n        }\n    },\n    disable(){\n        this.disableBucket();\n        this.disablePipette();\n    },\n    enableBucket(){\n        this.disable();\n        this.mode = \"bucket\";\n        var that = this;\n        var layers = this._findLayers(this.map);\n        layers.forEach(function(layer){\n            layer.on('click',that._appendColorToLayer,that);\n        });\n        that._updateToolbarIcon();\n    },\n    disableBucket(){\n        this.mode = \"\";\n        var that = this;\n        var layers = this._findLayers(this.map);\n        layers.forEach(function(layer){\n            layer.off('click',that._appendColorToLayer,that);\n        });\n        that._updateToolbarIcon();\n    },\n    _findLayers: function(map) {\n        let layers = [];\n        map.eachLayer(layer => {\n            if (\n                layer instanceof L.Polyline ||\n                layer instanceof L.Circle ||\n                layer instanceof L.CircleMarker\n            ) {\n                layers.push(layer);\n            }\n        });\n        // filter out layers that don't have the leaflet-geoman instance\n        layers = layers.filter(layer => !!layer.pm);\n        // filter out everything that's leaflet-geoman specific temporary stuff\n        layers = layers.filter(layer => !layer._pmTempLayer);\n        return layers;\n    },\n    _appendColorToLayer(e){\n        var layer = e.target;\n        layer.setStyle(this.getStyle());\n    },\n    enablePipette(){\n        this.disable();\n        this.mode = \"pipette\";\n        var that = this;\n        var layers = this._findLayers(this.map);\n        layers.forEach(function(layer){\n            layer.on('click',that._getColorFromLayer,that);\n        });\n        that._updateToolbarIcon();\n    },\n    disablePipette(){\n        this.mode = \"\";\n        var that = this;\n        var layers = this._findLayers(this.map);\n        layers.forEach(function(layer){\n            layer.off('click',that._getColorFromLayer,that);\n        });\n        that._updateToolbarIcon();\n    },\n    _getColorFromLayer(e){\n        var layer = e.target;\n        var options = layer.options;\n\n        if(options.color){\n            this.setStyle({color: options.color});\n        }\n        if(options.fillColor){\n            this.setStyle({fillColor: options.fillColor});\n        }else if(!options.fillColor && options.fill){\n            this.setStyle({fillColor: this.getStyle().color});\n        }\n        if(options.opacity){\n            this.setStyle({opacity: options.opacity});\n        }\n        if(options.fillOpacity){\n            this.setStyle({fillOpacity: options.fillOpacity});\n        }\n    },\n    getMode(){\n        return this.mode;\n    },\n    setMode(mode){\n        switch (mode) {\n            case \"bucket\": this.enableBucket(); break;\n            case \"pipette\": this.enablePipette(); break;\n            default: this.disable();\n        }\n    }\n\n\n\n});\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });